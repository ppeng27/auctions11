random = None
math = None
time = None


class CompetitorInstance():
    def __init__(self):
        # initialize personal variables
        self.bot_name = 'i_know_it'
        self.stage_stat = \
[[(13, 26), (14, 27), (14, 27), (15, 28), (16, 29), (16, 30), (16, 30), (17, 31), (18, 32), (18, 32), (19, 33), (19, 34), (20, 35), (20, 35), (21, 36), (22, 37), (22, 38), (22, 38), (23, 39), (24, 40), (24, 40), (25, 41), (25, 42), (26, 43), (26, 43), (27, 44), (28, 45), (28, 45), (29, 46), (29, 47), (30, 48), (30, 48), (31, 49), (32, 50), (32, 50), (33, 51), (33, 52), (34, 53), (34, 53), (35, 54), (36, 55), (36, 55), (37, 56), (37, 57), (38, 58), (38, 58), (39, 59), (40, 60), (40, 60), (41, 61), (42, 62), (42, 63), (42, 63), (43, 64), (44, 65), (44, 65), (45, 66), (46, 67), (46, 67), (47, 68), (47, 69), (48, 70), (48, 70), (49, 71), (50, 72), (50, 72), (51, 73), (51, 74), (52, 75), (52, 75), (53, 76), (54, 77), (54, 77), (55, 78), (55, 78), (56, 79), (57, 80), (57, 81), (57, 81), (58, 82), (59, 83), (59, 83), (60, 84), (61, 85), (61, 85), (62, 86), (62, 87), (63, 88), (63, 88), (64, 89), (65, 90), (65, 90), (66, 91), (67, 92), (67, 92), (68, 93), (68, 94), (69, 95), (69, 95), (70, 96), (71, 97), (71, 97), (72, 98), (73, 99), (73, 99), (74, 100), (74, 101), (75, 102), (75, 102), (76, 103), (76, 103), (77, 104), (78, 105), (78, 105), (79, 106), (80, 107), (80, 107), (81, 108), (81, 109), (82, 110), (82, 110), (83, 111), (84, 112), (84, 112), (85, 113), (86, 114), (86, 114), (87, 115), (87, 116), (88, 117), (88, 117), (89, 118), (90, 119), (90, 119), (91, 120), (91, 120), (92, 121), (93, 122), (93, 122), (94, 123), (94, 124), (95, 125), (95, 125), (96, 126), (97, 127), (97, 127), (98, 128), (99, 129), (99, 129), (100, 130), (101, 131), (101, 131), (101, 132), (102, 133), (103, 134), (103, 134), (104, 135), (105, 136), (105, 136), (106, 137), (106, 137), (107, 138), (108, 139), (108, 140), (109, 141), (109, 141), (110, 142), (110, 142), (111, 143), (112, 144), (112, 144), (113, 145), (114, 146), (114, 146), (115, 147), (116, 148), (116, 149), (116, 149), (117, 150), (118, 151), (118, 151), (119, 152), (120, 153), (120, 153), (121, 154), (121, 154), (122, 155), (123, 156), (123, 156), (124, 157), (124, 158), (125, 159), (125, 159), (126, 160), (127, 161), (127, 161), (128, 162), (129, 163), (129, 163), (130, 164), (131, 165), (131, 165), (132, 166), (132, 167), (133, 168), (133, 168), (134, 169), (135, 170), (135, 170), (136, 171), (136, 171), (137, 172), (138, 173), (138, 173), (139, 174), (140, 175), (140, 176), (140, 176), (141, 177), (142, 178), (142, 178), (143, 179), (144, 180), (144, 180), (145, 181), (146, 182), (146, 182), (147, 183), (148, 184), (148, 184), (149, 185), (149, 186), (150, 187), (150, 187), (151, 188), (151, 188), (152, 189), (153, 190), (153, 190), (154, 191), (155, 192), (155, 192), (156, 193), (157, 194), (157, 194), (158, 195), (158, 196), (159, 197), (159, 197), (160, 198), (161, 199), (161, 199), (162, 200), (163, 201), (163, 201), (164, 202), (164, 202), (165, 203), (166, 204), (166, 204), (167, 205), (167, 206), (168, 207), (168, 207), (169, 208), (170, 209), (170, 209), (171, 210), (172, 211), (172, 211), (173, 212), (174, 213), (174, 213), (175, 214), (175, 214), (176, 215), (176, 216), (177, 217), (177, 217), (178, 218), (179, 219), (179, 219), (180, 220), (181, 221), (181, 221), (182, 222), (183, 223), (183, 223), (184, 224), (185, 225), (185, 225), (186, 226), (186, 227), (187, 228), (187, 228), (188, 229), (189, 230), (189, 230), (190, 231), (190, 231), (191, 232), (192, 233), (192, 233), (193, 234), (194, 235), (194, 235), (195, 236), (196, 237), (196, 238), (196, 238), (197, 239), (198, 240), (198, 240), (199, 241), (200, 242), (200, 242), (201, 243), (201, 243), (202, 244), (203, 245), (203, 245), (204, 246), (205, 247), (205, 247), (206, 248), (206, 249), (207, 250), (207, 250), (208, 251), (209, 252), (209, 252), (210, 253), (211, 254), (211, 254), (212, 255), (212, 255), (213, 256), (214, 257), (214, 257), (215, 258), (216, 259), (216, 259), (216, 260), (217, 261), (218, 262), (218, 262), (219, 263), (220, 264), (220, 264), (221, 265), (222, 266), (222, 266), (223, 267), (224, 268), (224, 268), (225, 269), (225, 269), (226, 270), (227, 271), (227, 272), (227, 272), (228, 273), (229, 274), (229, 274), (230, 275), (231, 276), (231, 276), (232, 277), (233, 278), (233, 278), (234, 279), (235, 280), (235, 280), (236, 281), (236, 281), (237, 282), (238, 283), (238, 284), (238, 284), (239, 285), (240, 286), (240, 286), (241, 287), (242, 288), (242, 288), (243, 289), (244, 290), (244, 290), (245, 291), (246, 292), (246, 292), (247, 293), (247, 293), (248, 294), (249, 295), (249, 296), (250, 297), (250, 297), (251, 298), (251, 298), (252, 299), (253, 300), (253, 300), (254, 301), (255, 302), (255, 302), (256, 303), (257, 304), (257, 304), (258, 305), (258, 305), (259, 306), (260, 307), (260, 307), (261, 309), (261, 309), (262, 310), (262, 310), (263, 311), (264, 312), (264, 312), (265, 313), (266, 314), (266, 314), (267, 315), (268, 316), (268, 316), (269, 317), (270, 318), (270, 318), (271, 319), (271, 319), (272, 320), (272, 321), (273, 322), (273, 322), (274, 323), (275, 324), (275, 324), (276, 325), (277, 326), (277, 326), (278, 327), (279, 328), (279, 328), (280, 329), (281, 330), (281, 330), (282, 331), (282, 331), (283, 332), (284, 333), (284, 334), (284, 334), (285, 335), (286, 336), (286, 336), (287, 337), (288, 338), (288, 338), (289, 339), (290, 340), (290, 340), (291, 341), (292, 342), (292, 342), (293, 343), (293, 343), (294, 344), (295, 345), (295, 345), (296, 346), (296, 347), (297, 348), (297, 348), (298, 349), (299, 350), (299, 350), (300, 351), (301, 352), (301, 352), (302, 353), (303, 354), (303, 354), (304, 355), (304, 355), (305, 356), (306, 357), (306, 357), (307, 358), (308, 359), (308, 359), (309, 360), (309, 361), (310, 362), (310, 362), (311, 363), (312, 364), (312, 364), (313, 365), (314, 366), (314, 366), (315, 367), (316, 368), (316, 368), (317, 369), (317, 369), (318, 370), (319, 371), (319, 371), (320, 372), (321, 373), (321, 373), (321, 374), (322, 375), (323, 376), (323, 376), (324, 377), (325, 378), (325, 378), (326, 379), (327, 380), (327, 380), (328, 381), (328, 381), (329, 382), (330, 383), (330, 383), (331, 384), (332, 385), (332, 385), (333, 386), (334, 387), (334, 387), (334, 388), (335, 389), (336, 390), (336, 390), (337, 391), (338, 392), (338, 392), (339, 393), (339, 393), (340, 394), (341, 395), (341, 395), (342, 396), (343, 397), (343, 397), (344, 398), (345, 399), (345, 399), (346, 400), (347, 401), (347, 401), (348, 402), (348, 403), (349, 404), (349, 404), (350, 405), (350, 405), (351, 406), (352, 407), (352, 407), (353, 408), (354, 409), (354, 409), (355, 410), (356, 411), (356, 411), (357, 412), (358, 413), (358, 413), (359, 414), (359, 414), (360, 415), (361, 416), (361, 417), (361, 417), (362, 418), (363, 419), (363, 419), (364, 420), (365, 421), (365, 421), (366, 422), (367, 423), (367, 423), (368, 424), (369, 425), (369, 425), (370, 426), (370, 426), (371, 427), (372, 428), (372, 428), (373, 429), (374, 430), (374, 430), (375, 431), (375, 432), (376, 433), (376, 433), (377, 434), (378, 435), (378, 435), (379, 436), (380, 437), (380, 437), (381, 438), (381, 438), (382, 439), (383, 440), (383, 440), (384, 441), (385, 442), (385, 442), (386, 443), (387, 444), (387, 444), (388, 445), (389, 446), (389, 446), (389, 447), (390, 448), (391, 449), (391, 449), (392, 450), (393, 451), (393, 451), (394, 452), (394, 452), (395, 453), (396, 454), (396, 454), (397, 455), (398, 456), (398, 456), (399, 457), (400, 458), (400, 458), (401, 459), (401, 459), (402, 460), (403, 461), (403, 462), (404, 463), (404, 463), (405, 464), (405, 464), (406, 465), (407, 466), (407, 466), (408, 467), (409, 468), (409, 468), (410, 469), (411, 470), (411, 470), (412, 471), (412, 471), (413, 472), (414, 473), (414, 473), (415, 474), (416, 475), (416, 475), (417, 476), (418, 477), (418, 478), (418, 478), (419, 479), (420, 480), (420, 480), (421, 481), (422, 482), (422, 482), (423, 483), (424, 484), (424, 484), (425, 485), (425, 485), (426, 486), (427, 487), (427, 487), (428, 488), (429, 489), (429, 489), (430, 490), (431, 491), (431, 491), (432, 492), (432, 493), (433, 494), (433, 494), (434, 495), (435, 496), (435, 496), (436, 497), (436, 497), (437, 498), (438, 499), (438, 499), (439, 500), (440, 501), (440, 501), (441, 502), (442, 503), (442, 503), (443, 504), (443, 504), (444, 505), (445, 506), (445, 506), (446, 507), (447, 508), (447, 508), (447, 509), (448, 510), (449, 511), (449, 511), (450, 512), (451, 513), (451, 513), (452, 514), (453, 515), (453, 515), (454, 516), (455, 517), (455, 517), (456, 518), (456, 518), (457, 519), (458, 520), (458, 520), (459, 521), (460, 522), (460, 522), (461, 523), (462, 524), (462, 524), (463, 525), (463, 526), (464, 527), (464, 527), (465, 528), (466, 529), (466, 529), (467, 530), (467, 530), (468, 531), (469, 532), (469, 532), (470, 533), (471, 534), (471, 534), (472, 535), (473, 536), (473, 536), (474, 537), (474, 537), (475, 538), (476, 539), (476, 539), (477, 540), (478, 541), (478, 541), (478, 542), (479, 543), (480, 544), (480, 544), (481, 545), (482, 546), (482, 546), (483, 547), (484, 548), (484, 548), (485, 549), (486, 550), (486, 550), (487, 551), (487, 551), (488, 552), (489, 553), (489, 553), (490, 554), (491, 555), (491, 555), (492, 556), (493, 557), (493, 557), (494, 558), (494, 559), (495, 560), (495, 560), (496, 561), (497, 562), (497, 562), (498, 563), (498, 563), (499, 564), (500, 565), (500, 565), (501, 566), (502, 567), (502, 567), (503, 568), (504, 569), (504, 569), (505, 570), (505, 570), (506, 571), (507, 572), (507, 572), (508, 573), (509, 574), (509, 574), (510, 575), (510, 576), (511, 577), (511, 577), (512, 578), (513, 579), (513, 579), (514, 580), (515, 581), (515, 581), (516, 582), (517, 583), (517, 583), (518, 584), (518, 584), (519, 585), (520, 586), (520, 586), (521, 587), (522, 588), (522, 588), (523, 589), (524, 590), (524, 590), (525, 591), (525, 591), (526, 592), (526, 593), (527, 594), (528, 595), (528, 595), (529, 596), (529, 596), (530, 597), (531, 598), (531, 598), (532, 599), (533, 600), (533, 600), (534, 601), (535, 602), (535, 602), (536, 603), (536, 603), (537, 604), (538, 605), (538, 605), (539, 606), (540, 607), (540, 607), (541, 608), (542, 609), (542, 609), (543, 610), (543, 611), (544, 612), (544, 612), (545, 613), (546, 614), (546, 614), (547, 615), (548, 616), (548, 616), (549, 617), (549, 617), (550, 618), (551, 619), (551, 619), (552, 620), (553, 621), (553, 621), (554, 622), (555, 623), (555, 623), (556, 624), (556, 624), (557, 625), (558, 626), (558, 626), (559, 627), (560, 628), (560, 629), (560, 629), (561, 630), (562, 631), (562, 631), (563, 632), (564, 633), (564, 633), (565, 634), (566, 635), (566, 635), (567, 636), (567, 636), (568, 637), (569, 638), (569, 638), (570, 639), (571, 640), (571, 640), (572, 641), (573, 642), (573, 642), (574, 643), (575, 644), (575, 644), (576, 645), (576, 645), (577, 646), (577, 647), (578, 648), (579, 649), (579, 649), (580, 650), (580, 650), (581, 651), (582, 652), (582, 652), (583, 653), (584, 654), (584, 654), (585, 655), (586, 656), (586, 656), (587, 657), (587, 657), (588, 658), (589, 659), (589, 659), (590, 660), (591, 661), (591, 661), (592, 662), (593, 663), (593, 663), (594, 664), (594, 665), (595, 666), (595, 666), (596, 667), (597, 668), (597, 668), (598, 669), (598, 669), (599, 670), (600, 671), (600, 671), (601, 672), (602, 673), (602, 673), (603, 674), (604, 675), (604, 675), (605, 676), (606, 677), (606, 677), (607, 678), (607, 678), (608, 679), (609, 680), (609, 680), (610, 681), (611, 682), (611, 682), (612, 683), (612, 684), (613, 685), (613, 685), (614, 686), (615, 687), (615, 687), (616, 688), (617, 689), (617, 689), (618, 690), (618, 690), (619, 691), (620, 692), (620, 692), (621, 693), (622, 694), (622, 694), (623, 695), (624, 696), (624, 696), (625, 697), (626, 698), (626, 698), (627, 699), (627, 699), (628, 700), (629, 701), (629, 701), (630, 702), (630, 703), (631, 704), (631, 704), (632, 705), (633, 706), (633, 706), (634, 707), (635, 708), (635, 708), (636, 709), (637, 710), (637, 710), (638, 711), (638, 711), (639, 712), (640, 713), (640, 713), (641, 714), (642, 715), (642, 715), (643, 716), (644, 717), (644, 717), (645, 718), (645, 718), (646, 719), (647, 720), (647, 720), (648, 721), (648, 722), (649, 723), (649, 723), (650, 724), (651, 725), (651, 725), (652, 726), (653, 727), (653, 727), (654, 728), (655, 729), (655, 729), (656, 730), (657, 731), (657, 731), (658, 732), (658, 732), (659, 733), (660, 734), (660, 734), (661, 735), (662, 736), (662, 736), (663, 737), (664, 738), (664, 738), (665, 739), (665, 739), (666, 740), (666, 741), (667, 742), (668, 743), (668, 743), (669, 744), (669, 744), (670, 745), (671, 746), (671, 746), (672, 747), (673, 748), (673, 748), (674, 749), (675, 750), (675, 750), (676, 751), (676, 751), (677, 752), (678, 753), (678, 753), (679, 754), (680, 755), (680, 755), (681, 756), (682, 757), (682, 757), (683, 758), (684, 759), (684, 759), (685, 760), (685, 761), (686, 762), (686, 762), (687, 763), (688, 764), (688, 764), (689, 765), (689, 765), (690, 766), (691, 767), (691, 767), (692, 768), (693, 769), (693, 769), (694, 770), (695, 771), (695, 771), (696, 772), (696, 772), (697, 773), (698, 774), (698, 774), (699, 775), (700, 776), (700, 776), (701, 777), (702, 778), (702, 778), (703, 779), (703, 780), (704, 781), (704, 781), (705, 782), (706, 783), (706, 783), (707, 784), (707, 784), (708, 785), (709, 786), (709, 786), (710, 787), (711, 788), (711, 788), (712, 789), (713, 790), (713, 790), (714, 791), (715, 792), (715, 792), (716, 793), (716, 793), (717, 794), (718, 795), (718, 795), (719, 796), (720, 797), (720, 797), (721, 798), (722, 799), (722, 799), (723, 800), (723, 801), (724, 802), (724, 802), (725, 803), (726, 804), (726, 804), (727, 805), (727, 805), (728, 806), (729, 807), (729, 807), (730, 808), (731, 809), (731, 809), (732, 810), (733, 811), (733, 811), (734, 812), (735, 813), (735, 813), (736, 814), (736, 814), (737, 815), (738, 816), (738, 816), (739, 817), (740, 818), (740, 818), (741, 819), (742, 820), (742, 820), (742, 821), (743, 822), (744, 823), (744, 823), (745, 824), (746, 825), (746, 825), (747, 826), (747, 826), (748, 827), (749, 828), (749, 828), (750, 829), (751, 830), (751, 830), (752, 831), (753, 832), (753, 832), (754, 833), (754, 833), (755, 834), (756, 835), (756, 835), (757, 836), (758, 837), (758, 837), (759, 838), (760, 839), (760, 839), (761, 840), (762, 841), (762, 841), (762, 842), (763, 843), (764, 844), (764, 844), (765, 845), (766, 846), (766, 846), (767, 847), (767, 847), (768, 848), (769, 849), (769, 849), (770, 850), (771, 851), (771, 851), (772, 852), (773, 853), (773, 853), (774, 854), (774, 854), (775, 855), (776, 856), (776, 856), (777, 857), (778, 858), (778, 858), (779, 859), (780, 860), (780, 860), (781, 861), (781, 862), (782, 863), (782, 863), (783, 864), (784, 865), (784, 865), (785, 866), (785, 866), (786, 867), (787, 868), (787, 868), (788, 869), (789, 870), (789, 870), (790, 871), (791, 872), (791, 872), (792, 873), (793, 874), (793, 874), (794, 875), (794, 875), (795, 876), (796, 877), (796, 877), (797, 878), (798, 879), (798, 879), (799, 880), (800, 881), (800, 881), (801, 882), (801, 882), (802, 883), (802, 884), (803, 885), (804, 886), (804, 886), (805, 887), (805, 887), (806, 888), (807, 889), (807, 889), (808, 890), (809, 891), (809, 891), (810, 892), (811, 893), (811, 893), (812, 894), (813, 895), (813, 895), (814, 896), (814, 896), (815, 897), (816, 898), (816, 898), (817, 899), (818, 900), (818, 900), (819, 901), (820, 902), (820, 902), (821, 903), (821, 903), (822, 904), (822, 905), (823, 906), (824, 907), (824, 907), (825, 908), (825, 908), (826, 909), (827, 910), (827, 910), (828, 911), (829, 912), (829, 912), (830, 913), (831, 914), (831, 914), (832, 915), (832, 915), (833, 916), (834, 917), (834, 917), (835, 918), (836, 919), (836, 919), (837, 920), (838, 921), (838, 921), (839, 922), (840, 923), (840, 923), (841, 924), (841, 924), (842, 925), (843, 926), (843, 927), (844, 928), (844, 928), (845, 929), (845, 929), (846, 930), (847, 931), (847, 931), (848, 932), (849, 933), (849, 933), (850, 934), (851, 935), (851, 935), (852, 936), (852, 936), (853, 937), (854, 938), (854, 938), (855, 939), (856, 940), (856, 940), (857, 941), (858, 942), (858, 942), (859, 943), (860, 944), (860, 944), (861, 945), (861, 945), (862, 946), (863, 947), (863, 947), (864, 948), (864, 949), (865, 950), (865, 950), (866, 951), (867, 952), (867, 952), (868, 953), (869, 954), (869, 954), (870, 955), (871, 956), (871, 956), (872, 957), (872, 957), (873, 958), (874, 959), (874, 959), (875, 960), (876, 961), (876, 961), (877, 962), (878, 963), (878, 963), (879, 964), (879, 964), (880, 965), (881, 966), (881, 966), (882, 967), (883, 968), (883, 968), (884, 969), (885, 970), (885, 970), (885, 971), (886, 972), (887, 973), (887, 973), (888, 974), (889, 975), (889, 975), (890, 976), (891, 977), (891, 977), (892, 978), (892, 978), (893, 979), (894, 980), (894, 980), (895, 981), (896, 982), (896, 982), (897, 983), (898, 984), (898, 984), (899, 985), (899, 985), (900, 986), (901, 987), (901, 987), (902, 988), (903, 989), (903, 989), (904, 990), (905, 991), (905, 991), (906, 992), (906, 993), (907, 994), (907, 994), (908, 995), (909, 996), (909, 996), (910, 997), (910, 997), (911, 998), (912, 999), (912, 999), (913, 1000), (914, 1001), (914, 1001), (915, 1002), (916, 1003), (916, 1003), (917, 1004)], [(1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 12), (1, 12), (1, 12), (2, 13), (2, 13), (2, 13), (2, 13), (2, 13), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (3, 15), (3, 15), (3, 15), (3, 16), (3, 16), (3, 16), (3, 16), (3, 16), (3, 16), (4, 17), (4, 17), (4, 17), (4, 18), (4, 18), (4, 18), (4, 18), (4, 18), (4, 18), (5, 19), (5, 19), (5, 19), (5, 20), (5, 20), (5, 20), (5, 20), (5, 20), (5, 20), (5, 20), (6, 21), (6, 21), (6, 21), (6, 22), (6, 22), (6, 22), (6, 22), (6, 22), (6, 22), (7, 23), (7, 23), (7, 23), (7, 23), (7, 24), (7, 24), (7, 24), (7, 24), (7, 24), (8, 25), (8, 25), (8, 25), (8, 25), (8, 25), (8, 25), (8, 26), (8, 26), (8, 26), (8, 26), (9, 27), (9, 27), (9, 27), (9, 27), (9, 27), (9, 27), (10, 28), (10, 28), (10, 28), (10, 29), (10, 29), (10, 29), (10, 29), (10, 29), (10, 29), (11, 30), (11, 30), (11, 30), (11, 30), (11, 30), (11, 30), (11, 31), (11, 31), (11, 31), (11, 31), (12, 32), (12, 32), (12, 32), (12, 32), (12, 32), (12, 32), (13, 33), (13, 33), (13, 33), (13, 33), (13, 34), (13, 34), (13, 34), (13, 34), (13, 34), (14, 35), (14, 35), (14, 35), (14, 35), (14, 35), (14, 35), (14, 35), (15, 36), (15, 36), (15, 36), (15, 37), (15, 37), (15, 37), (15, 37), (15, 37), (15, 37), (16, 38), (16, 38), (16, 38), (16, 38), (16, 38), (16, 38), (16, 39), (16, 39), (16, 39), (17, 40), (17, 40), (17, 40), (17, 40), (17, 40), (17, 40), (17, 40), (18, 41), (18, 41), (18, 41), (18, 41), (18, 41), (18, 41), (18, 42), (18, 42), (18, 42), (19, 43), (19, 43), (19, 43), (19, 43), (19, 43), (19, 43), (20, 44), (20, 44), (20, 44), (20, 44), (20, 44), (20, 44), (20, 44), (20, 45), (20, 45), (20, 45), (21, 46), (21, 46), (21, 46), (21, 46), (21, 46), (21, 46), (22, 47), (22, 47), (22, 47), (22, 47), (22, 47), (22, 47), (23, 48), (23, 48), (23, 48), (23, 49), (23, 49), (23, 49), (23, 49), (23, 49), (23, 49), (23, 49), (24, 50), (24, 50), (24, 50), (24, 50), (24, 50), (24, 50), (25, 51), (25, 51), (25, 51), (25, 51), (25, 52), (25, 52), (25, 52), (25, 52), (25, 52), (26, 53), (26, 53), (26, 53), (26, 53), (26, 53), (26, 53), (26, 53), (27, 54), (27, 54), (27, 54), (27, 54), (27, 54), (27, 55), (27, 55), (27, 55), (27, 55), (28, 56), (28, 56), (28, 56), (28, 56), (28, 56), (28, 56), (29, 57), (29, 57), (29, 57), (29, 57), (29, 57), (29, 57), (30, 58), (30, 58), (30, 58), (30, 58), (30, 58), (30, 59), (30, 59), (30, 59), (30, 59), (30, 59), (31, 60), (31, 60), (31, 60), (31, 60), (31, 60), (31, 60), (32, 61), (32, 61), (32, 61), (32, 61), (32, 61), (32, 61), (33, 62), (33, 62), (33, 62), (33, 63), (33, 63), (33, 63), (33, 63), (33, 63), (33, 63), (33, 63), (34, 64), (34, 64), (34, 64), (34, 64), (34, 64), (34, 64), (35, 65), (35, 65), (35, 65), (35, 65), (35, 65), (35, 65), (35, 66), (35, 66), (35, 66), (36, 67), (36, 67), (36, 67), (36, 67), (36, 67), (36, 67), (36, 67), (37, 68), (37, 68), (37, 68), (37, 68), (37, 68), (37, 68), (38, 69), (38, 69), (38, 69), (38, 69), (38, 69), (38, 70), (38, 70), (38, 70), (38, 70), (39, 71), (39, 71), (39, 71), (39, 71), (39, 71), (39, 71), (40, 72), (40, 72), (40, 72), (40, 72), (40, 72), (40, 72), (40, 72), (41, 73), (41, 73), (41, 73), (41, 73), (41, 73), (41, 74), (41, 74), (41, 74), (41, 74), (42, 75), (42, 75), (42, 75), (42, 75), (42, 75), (42, 75), (43, 76), (43, 76), (43, 76), (43, 76), (43, 76), (43, 76), (43, 76), (44, 77), (44, 77), (44, 77), (44, 77), (44, 77), (44, 78), (44, 78), (44, 78), (44, 78), (45, 79), (45, 79), (45, 79), (45, 79), (45, 79), (45, 79), (46, 80), (46, 80), (46, 80), (46, 80), (46, 80), (46, 80), (47, 81), (47, 81), (47, 81), (47, 81), (47, 81), (47, 81), (47, 82), (47, 82), (47, 82), (47, 82), (48, 83), (48, 83), (48, 83), (48, 83), (48, 83), (48, 83), (49, 84), (49, 84), (49, 84), (49, 84), (49, 84), (49, 84), (50, 85), (50, 85), (50, 85), (50, 85), (50, 85), (50, 85), (50, 85), (51, 86), (51, 86), (51, 86), (51, 87), (51, 87), (51, 87), (51, 87), (51, 87), (51, 87), (52, 88), (52, 88), (52, 88), (52, 88), (52, 88), (52, 88), (53, 89), (53, 89), (53, 89), (53, 89), (53, 89), (53, 89), (53, 89), (54, 90), (54, 90), (54, 90), (54, 90), (54, 91), (54, 91), (54, 91), (54, 91), (54, 91), (55, 92), (55, 92), (55, 92), (55, 92), (55, 92), (55, 92), (56, 93), (56, 93), (56, 93), (56, 93), (56, 93), (56, 93), (57, 94), (57, 94), (57, 94), (57, 94), (57, 94), (57, 94), (57, 94), (58, 95), (58, 95), (58, 95), (58, 96), (58, 96), (58, 96), (58, 96), (58, 96), (58, 96), (59, 97), (59, 97), (59, 97), (59, 97), (59, 97), (59, 97), (60, 98), (60, 98), (60, 98), (60, 98), (60, 98), (60, 98), (61, 99), (61, 99), (61, 99), (61, 99), (61, 99), (61, 99), (61, 100), (61, 100), (61, 100), (61, 100), (62, 101), (62, 101), (62, 101), (62, 101), (62, 101), (62, 101), (63, 102), (63, 102), (63, 102), (63, 102), (63, 102), (63, 102), (64, 103), (64, 103), (64, 103), (64, 103), (64, 103), (64, 103), (64, 103), (65, 104), (65, 104), (65, 104), (65, 104), (65, 105), (65, 105), (65, 105), (65, 105), (65, 105), (66, 106), (66, 106), (66, 106), (66, 106), (66, 106), (66, 106), (67, 107), (67, 107), (67, 107), (67, 107), (67, 107), (67, 107), (68, 108), (68, 108), (68, 108), (68, 108), (68, 108), (68, 108), (68, 108), (69, 109), (69, 109), (69, 109), (69, 110), (69, 110), (69, 110), (69, 110), (69, 110), (69, 110), (70, 111), (70, 111), (70, 111), (70, 111), (70, 111), (70, 111), (71, 112), (71, 112), (71, 112), (71, 112), (71, 112), (71, 112), (71, 112), (72, 113), (72, 113), (72, 113), (72, 113), (72, 113), (72, 113), (73, 114), (73, 114), (73, 114), (73, 115), (73, 115), (73, 115), (73, 115), (73, 115), (73, 115), (74, 116), (74, 116), (74, 116), (74, 116), (74, 116), (74, 116), (75, 117), (75, 117), (75, 117), (75, 117), (75, 117), (75, 117), (75, 117), (76, 118), (76, 118), (76, 118), (76, 118), (76, 118), (76, 118), (77, 119), (77, 119), (77, 119), (77, 119), (77, 120), (77, 120), (77, 120), (77, 120), (77, 120), (78, 121), (78, 121), (78, 121), (78, 121), (78, 121), (78, 121), (78, 121), (79, 122), (79, 122), (79, 122), (79, 122), (79, 122), (79, 122), (80, 123), (80, 123), (80, 123), (80, 123), (80, 123), (80, 123), (81, 124), (81, 124), (81, 124), (81, 124), (81, 124), (81, 125), (81, 125), (81, 125), (81, 125), (82, 126), (82, 126), (82, 126), (82, 126), (82, 126), (82, 126), (82, 126), (83, 127), (83, 127), (83, 127), (83, 127), (83, 127), (83, 127), (84, 128), (84, 128), (84, 128), (84, 128), (84, 128), (84, 128), (85, 129), (85, 129), (85, 129), (85, 129), (85, 129), (85, 129), (85, 130), (85, 130), (85, 130), (85, 130), (86, 131), (86, 131), (86, 131), (86, 131), (86, 131), (86, 131), (87, 132), (87, 132), (87, 132), (87, 132), (87, 132), (87, 132), (88, 133), (88, 133), (88, 133), (88, 133), (88, 133), (88, 133), (89, 134), (89, 134), (89, 134), (89, 134), (89, 134), (89, 134), (89, 134), (90, 135), (90, 135), (90, 135), (90, 136), (90, 136), (90, 136), (90, 136), (90, 136), (90, 136), (91, 137), (91, 137), (91, 137), (91, 137), (91, 137), (91, 137), (92, 138), (92, 138), (92, 138), (92, 138), (92, 138), (92, 138), (93, 139), (93, 139), (93, 139), (93, 139), (93, 139), (93, 139), (93, 139), (94, 140), (94, 140), (94, 140), (94, 140), (94, 140), (94, 141), (94, 141), (94, 141), (94, 141), (95, 142), (95, 142), (95, 142), (95, 142), (95, 142), (95, 142), (96, 143), (96, 143), (96, 143), (96, 143), (96, 143), (96, 143), (96, 143), (97, 144), (97, 144), (97, 144), (97, 144), (97, 144), (97, 144), (98, 145), (98, 145), (98, 145), (98, 145), (98, 145), (98, 145), (99, 146), (99, 146), (99, 146), (99, 146), (99, 147), (99, 147), (99, 147), (99, 147), (99, 147), (100, 148), (100, 148), (100, 148), (100, 148), (100, 148), (100, 148), (100, 148), (101, 149), (101, 149), (101, 149), (101, 149), (101, 149), (101, 149), (102, 150), (102, 150), (102, 150), (102, 150), (102, 150), (102, 150), (103, 151), (103, 151), (103, 151), (103, 151), (103, 151), (103, 151), (103, 152), (103, 152), (103, 152), (103, 152), (104, 153), (104, 153), (104, 153), (104, 153), (104, 153), (104, 153), (105, 154), (105, 154), (105, 154), (105, 154), (105, 154), (105, 154), (106, 155), (106, 155), (106, 155), (106, 155), (106, 155), (106, 155), (107, 156), (107, 156), (107, 156), (107, 156), (107, 156), (107, 156), (107, 156), (108, 157), (108, 157), (108, 157), (108, 157), (108, 157), (108, 158), (108, 158), (108, 158), (108, 158), (109, 159), (109, 159), (109, 159), (109, 159), (109, 159), (109, 159), (110, 160), (110, 160), (110, 160), (110, 160), (110, 160), (110, 160), (111, 161), (111, 161), (111, 161), (111, 161), (111, 161), (111, 161), (111, 161), (112, 162), (112, 162), (112, 162), (112, 162), (112, 162), (112, 162), (113, 163), (113, 163), (113, 163), (113, 163), (113, 163), (113, 163), (113, 164), (113, 164), (113, 164), (114, 165), (114, 165), (114, 165), (114, 165), (114, 165), (114, 165), (114, 165), (115, 166), (115, 166), (115, 166), (115, 166), (115, 166), (115, 166), (116, 167), (116, 167), (116, 167), (116, 167), (116, 167), (116, 167), (117, 168), (117, 168), (117, 168), (117, 168), (117, 168), (117, 168), (118, 169), (118, 169), (118, 169), (118, 169), (118, 169), (118, 169), (118, 170), (118, 170), (118, 170), (118, 170), (119, 171), (119, 171), (119, 171), (119, 171), (119, 171), (119, 171), (120, 172), (120, 172), (120, 172), (120, 172), (120, 172), (120, 172), (121, 173), (121, 173), (121, 173), (121, 173), (121, 173), (121, 173), (122, 174), (122, 174), (122, 174), (122, 174), (122, 174), (122, 174), (122, 174), (123, 175), (123, 175), (123, 175), (123, 175), (123, 175), (123, 175), (123, 176), (123, 176), (123, 176), (124, 177), (124, 177), (124, 177), (124, 177), (124, 177), (124, 177), (125, 178), (125, 178), (125, 178), (125, 178), (125, 178), (125, 178), (125, 178), (126, 179), (126, 179), (126, 179), (126, 179), (126, 179), (126, 179), (127, 180), (127, 180), (127, 180), (127, 180), (127, 180), (127, 180), (128, 181), (128, 181), (128, 181), (128, 181), (128, 181), (128, 181), (129, 182), (129, 182), (129, 182), (129, 182), (129, 183), (129, 183), (129, 183), (129, 183), (129, 183), (129, 183), (130, 184), (130, 184), (130, 184), (130, 184), (130, 184), (130, 184), (131, 185), (131, 185), (131, 185), (131, 185), (131, 185), (131, 185), (132, 186), (132, 186), (132, 186), (132, 186), (132, 186), (132, 186), (133, 187), (133, 187), (133, 187), (133, 187), (133, 187), (133, 187), (133, 187), (134, 188), (134, 188), (134, 188), (134, 188), (134, 188), (134, 189), (134, 189), (134, 189), (134, 189), (135, 190), (135, 190), (135, 190), (135, 190), (135, 190), (135, 190), (136, 191), (136, 191), (136, 191), (136, 191), (136, 191), (136, 191), (136, 191), (137, 192), (137, 192), (137, 192), (137, 192), (137, 192), (137, 192), (138, 193), (138, 193), (138, 193), (138, 193), (138, 193), (138, 193), (139, 194), (139, 194), (139, 194), (139, 194), (139, 194), (139, 194), (140, 195), (140, 195), (140, 195), (140, 196), (140, 196), (140, 196), (140, 196), (140, 196), (140, 196), (140, 196), (141, 197), (141, 197), (141, 197), (141, 197), (141, 197), (141, 197), (142, 198), (142, 198), (142, 198), (142, 198), (142, 198), (142, 198), (143, 199), (143, 199), (143, 199), (143, 199), (143, 199), (143, 199), (144, 200), (144, 200), (144, 200), (144, 200), (144, 200), (144, 200), (144, 200), (145, 201), (145, 201), (145, 201), (145, 201), (145, 201), (145, 202), (145, 202), (145, 202), (145, 202), (146, 203), (146, 203), (146, 203), (146, 203), (146, 203), (146, 203), (147, 204), (147, 204), (147, 204), (147, 204), (147, 204), (147, 204), (147, 204), (148, 205), (148, 205), (148, 205), (148, 205), (148, 205), (148, 205), (149, 206), (149, 206), (149, 206), (149, 206), (149, 206), (149, 206), (150, 207), (150, 207), (150, 207), (150, 207), (150, 207), (150, 207), (151, 208), (151, 208), (151, 208), (151, 208), (151, 208), (151, 209), (151, 209), (151, 209), (151, 209), (151, 209), (152, 210), (152, 210), (152, 210), (152, 210), (152, 210), (152, 210), (153, 211), (153, 211), (153, 211), (153, 211), (153, 211), (153, 211), (154, 212), (154, 212), (154, 212), (154, 212), (154, 212), (154, 212), (155, 213), (155, 213), (155, 213), (155, 213), (155, 213), (155, 213), (155, 213), (156, 214), (156, 214), (156, 214), (156, 214), (156, 214), (156, 214), (157, 215), (157, 215), (157, 215), (157, 215), (157, 216), (157, 216), (157, 216), (157, 216), (157, 216), (158, 217), (158, 217), (158, 217), (158, 217), (158, 217), (158, 217), (158, 217), (159, 218), (159, 218), (159, 218), (159, 218), (159, 218), (159, 218), (160, 219), (160, 219), (160, 219), (160, 219), (160, 219), (160, 219), (161, 220), (161, 220), (161, 220), (161, 220), (161, 220), (161, 220), (162, 221), (162, 221), (162, 221), (162, 221), (162, 221), (162, 221), (162, 221), (163, 222), (163, 222), (163, 222), (163, 223), (163, 223), (163, 223), (163, 223), (163, 223), (163, 223), (164, 224), (164, 224), (164, 224), (164, 224), (164, 224), (164, 224), (165, 225), (165, 225), (165, 225), (165, 225), (165, 225), (165, 225), (166, 226), (166, 226), (166, 226), (166, 226), (166, 226), (166, 226), (166, 226), (167, 227), (167, 227), (167, 227), (167, 227), (167, 227), (167, 227), (168, 228), (168, 228), (168, 228), (168, 228), (168, 228), (168, 228), (169, 229), (169, 229), (169, 229), (169, 229), (169, 230), (169, 230), (169, 230), (169, 230), (169, 230), (169, 230), (170, 231), (170, 231), (170, 231), (170, 231), (170, 231), (170, 231), (171, 232), (171, 232), (171, 232), (171, 232), (171, 232), (171, 232), (172, 233), (172, 233), (172, 233), (172, 233), (172, 233), (172, 233), (173, 234), (173, 234), (173, 234), (173, 234), (173, 234), (173, 234), (173, 234), (174, 235), (174, 235), (174, 235), (174, 235), (174, 235), (174, 235), (175, 236), (175, 236), (175, 236), (175, 236), (175, 237), (175, 237), (175, 237), (175, 237), (175, 237), (176, 238), (176, 238), (176, 238), (176, 238), (176, 238), (176, 238), (177, 239), (177, 239), (177, 239), (177, 239), (177, 239), (177, 239), (177, 239), (178, 240), (178, 240), (178, 240), (178, 240), (178, 240), (178, 240), (179, 241), (179, 241), (179, 241), (179, 241), (179, 241), (179, 241), (180, 242), (180, 242), (180, 242), (180, 242), (180, 242), (180, 242), (180, 242), (181, 243), (181, 243), (181, 243), (181, 243), (181, 243), (181, 244), (181, 244), (181, 244), (181, 244), (182, 245), (182, 245), (182, 245), (182, 245), (182, 245), (182, 245), (183, 246), (183, 246), (183, 246), (183, 246), (183, 246), (183, 246), (184, 247), (184, 247), (184, 247), (184, 247), (184, 247), (184, 247), (184, 247), (185, 248), (185, 248), (185, 248), (185, 248), (185, 248), (185, 248), (186, 249), (186, 249), (186, 249), (186, 249), (186, 249), (186, 249), (187, 250), (187, 250), (187, 250), (187, 250), (187, 250), (187, 250), (188, 251), (188, 251), (188, 251), (188, 252), (188, 252), (188, 252), (188, 252), (188, 252), (188, 252), (188, 252), (189, 253), (189, 253), (189, 253), (189, 253), (189, 253), (189, 253), (190, 254), (190, 254), (190, 254), (190, 254), (190, 254), (190, 254), (191, 255), (191, 255), (191, 255), (191, 255), (191, 255), (191, 255), (192, 256), (192, 256), (192, 256), (192, 256), (192, 256), (192, 256), (192, 256), (193, 257), (193, 257), (193, 257), (193, 257), (193, 257), (193, 257), (194, 258), (194, 258), (194, 258), (194, 258), (194, 258), (194, 259), (194, 259), (194, 259), (194, 259), (195, 260), (195, 260), (195, 260), (195, 260), (195, 260), (195, 260), (195, 260), (196, 261), (196, 261), (196, 261), (196, 261), (196, 261), (196, 261), (197, 262), (197, 262), (197, 262), (197, 262), (197, 262), (197, 262), (198, 263), (198, 263), (198, 263), (198, 263), (198, 263), (198, 263), (199, 264), (199, 264), (199, 264), (199, 264), (199, 264), (199, 264), (199, 264), (200, 265), (200, 265), (200, 265), (200, 265), (200, 265), (200, 265), (201, 266), (201, 266), (201, 266), (201, 267), (201, 267), (201, 267), (201, 267), (201, 267), (201, 267), (202, 268), (202, 268), (202, 268), (202, 268), (202, 268), (202, 268), (203, 269), (203, 269), (203, 269), (203, 269), (203, 269), (203, 269), (203, 269), (204, 270), (204, 270), (204, 270), (204, 270), (204, 270), (204, 270), (205, 271), (205, 271), (205, 271), (205, 271), (205, 271), (205, 271), (206, 272), (206, 272), (206, 272), (206, 272), (206, 272), (206, 272), (206, 272), (207, 273), (207, 273), (207, 273), (207, 273), (207, 273), (207, 274), (207, 274), (207, 274)], [(0, 5), (0, 5), (0, 5), (0, 5), (0, 5), (0, 5), (0, 5), (0, 5), (0, 5), (0, 5), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 6), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 7), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 8), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 9), (0, 10), (0, 10), (0, 10), (0, 10), (0, 10), (0, 10), (0, 10), (0, 10), (0, 10), (0, 10), (0, 10), (0, 10), (0, 10), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 11), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 12), (1, 13), (1, 13), (1, 13), (1, 13), (1, 13), (1, 13), (1, 13), (1, 13), (1, 13), (1, 13), (1, 13), (1, 13), (1, 13), (1, 13), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 14), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (2, 15), (3, 16), (3, 16), (3, 16), (3, 16), (3, 16), (3, 16), (3, 16), (3, 16), (3, 16), (3, 16), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 17), (3, 18), (3, 18), (3, 18), (3, 18), (3, 18), (3, 18), (3, 18), (3, 18), (3, 18), (3, 18), (3, 18), (3, 18), (3, 18), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 19), (4, 20), (4, 20), (4, 20), (4, 20), (4, 20), (4, 20), (4, 20), (4, 20), (4, 20), (4, 20), (4, 20), (4, 20), (4, 20), (4, 20), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 21), (5, 22), (5, 22), (5, 22), (5, 22), (5, 22), (5, 22), (5, 22), (5, 22), (5, 22), (5, 22), (5, 22), (5, 22), (5, 22), (5, 22), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 23), (6, 24), (6, 24), (6, 24), (6, 24), (6, 24), (6, 24), (6, 24), (6, 24), (6, 24), (6, 24), (6, 24), (6, 24), (6, 24), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (7, 25), (8, 26), (8, 26), (8, 26), (8, 26), (8, 26), (8, 26), (8, 26), (8, 26), (8, 26), (8, 26), (8, 26), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (8, 27), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 28), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (9, 29), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 30), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (10, 31), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (11, 32), (12, 33), (12, 33), (12, 33), (12, 33), (12, 33), (12, 33), (12, 33), (12, 33), (12, 33), (12, 33), (12, 33), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (12, 34), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 35), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (13, 36), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (14, 37), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 38), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (15, 39), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (16, 40), (17, 41), (17, 41), (17, 41), (17, 41), (17, 41), (17, 41), (17, 41), (17, 41), (17, 41), (17, 41), (17, 41), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (17, 42), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 43), (18, 44), (18, 44), (18, 44), (18, 44), (18, 44), (18, 44), (18, 44), (18, 44), (18, 44), (18, 44), (18, 44), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (19, 45), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 46), (20, 47), (20, 47), (20, 47), (20, 47), (20, 47), (20, 47), (20, 47), (20, 47), (20, 47), (20, 47), (20, 47), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (21, 48), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (22, 49), (23, 50), (23, 50), (23, 50), (23, 50), (23, 50), (23, 50), (23, 50), (23, 50), (23, 50), (23, 50), (23, 50), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (23, 51), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (24, 52), (25, 53), (25, 53), (25, 53), (25, 53), (25, 53), (25, 53), (25, 53), (25, 53), (25, 53), (25, 53), (25, 53), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (25, 54), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (26, 55), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 56), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (27, 57), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (28, 58), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 59), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (29, 60), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (30, 61), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (31, 62), (32, 63), (32, 63), (32, 63), (32, 63), (32, 63), (32, 63), (32, 63), (32, 63), (32, 63), (32, 63), (32, 63), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (32, 64), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (33, 65), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 66), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (34, 67), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (35, 68), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (36, 69), (37, 70), (37, 70), (37, 70), (37, 70), (37, 70), (37, 70), (37, 70), (37, 70), (37, 70), (37, 70), (37, 70), (37, 70), (37, 70), (37, 70), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (37, 71), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (38, 72), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (39, 73), (40, 74), (40, 74), (40, 74), (40, 74), (40, 74), (40, 74), (40, 74), (40, 74), (40, 74), (40, 74), (40, 74), (40, 74), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (40, 75), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (41, 76), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 77), (42, 78), (42, 78), (42, 78), (42, 78), (42, 78), (42, 78), (42, 78), (42, 78), (42, 78), (42, 78), (42, 78), (42, 78), (42, 78), (43, 79), (43, 79), (43, 79), (43, 79), (43, 79), (43, 79), (43, 79), (43, 79), (43, 79), (43, 79), (43, 79)]]

    def onGameStart(self, engine, game_parameters):
        # engine: an instance of the game engine with functions as outlined in the documentation.
        self.engine = engine
        # gameParameters: A dictionary containing a variety of game parameters
        self.gameParameters = game_parameters
        self.round = 0
        self.auction = 0
        self.mean = game_parameters["meanTrueValue"]
        self.stddev = game_parameters["stddevTrueValue"]
        self.minb = game_parameters["minimumBid"]
        self.num_players = game_parameters["numPlayers"]
        self.phase_2 = True if game_parameters["phase"] == 'phase_2' else False
        global random
        global math
        global time
        random = engine.random
        math = engine.math
        time = engine.time
        random.seed('{}:{}'.format(self.bot_name,
                                   time.time_ns() // 100000000000))
        self.magics = list(range(8, 24))
        random.shuffle(self.magics)
        self.magics_knows = list(range(8, 24))
        random.shuffle(self.magics_knows)

        self.teammate_dknows = set()
        self.teammate_dknows_yes = dict()
        self.teammate_dknows_no = set()
        self.teammate_knows = set()
        self.teammate_knows_yes = dict()
        self.teammate_knows_no = set()
        self.teammate_all = set()

        self.abs_enemy = set()
        self.enemy = set()

        self.npc = set()
        self.npc_yes = set()
        self.npc_no = set()

    def onAuctionStart(self, index, true_value):
        # index is the current player's index, that usually stays put from game to game
        # trueValue is -1 if this bot doesn't know the true value
        self.index = index
        self.engine.print(f"{self.index}")

        self.knows_true_value = true_value != -1
        if self.knows_true_value:
            self.engine.print(f"{self.index} knows true value")
        self.true_value = true_value
        self.recv_true_value = False
        self.bid_info = {}
        for index in range(self.num_players):
            self.bid_info[index] = {}
        self.bid_seq = []
        self.last_bid = 1

        self.stage_counter = [
            [0 for __ in range(self.num_players + 1)] for _ in range(3)]

        if self.phase_2:
            self.has_identified_teammates = False
            self.has_identified_roles = False
            self.teammate_dknows.clear()
            self.teammate_dknows_yes.clear()
            self.teammate_dknows_no.clear()
            self.teammate_knows.clear()
            self.teammate_knows_yes.clear()
            self.teammate_knows_no.clear()
            self.teammate_all.clear()
            self.abs_enemy.clear()
            self.enemy.clear()
        else:
            if self.auction == 0:
                self.has_identified_teammates = False
                self.has_identified_roles = False
            else:
                self.has_identified_teammates = 2 <= len(self.teammate_all) <= 3
                self.has_identified_roles = False

            if not self.has_identified_teammates:
                self.teammate_dknows.clear()
                self.teammate_dknows_yes.clear()
                self.teammate_dknows_no.clear()
                self.teammate_knows.clear()
                self.teammate_knows_yes.clear()
                self.teammate_knows_no.clear()
                self.teammate_all.clear()

            if not self.has_identified_roles:
                self.teammate_dknows.clear()
                self.teammate_knows.clear()

        self.broadcast = False
        self.team_hold_it = False
        self.hold_it = False
        self.no_one_knows = False
        self.sacrifice = False

        self.npc.clear()
        self.npc_yes.clear()
        self.npc_no.clear()

    def onBidMade(self, who_made_bid, how_much):
        # whoMadeBid is the index of the player that made the bid
        # howMuch is the amount that the bid was
        if self.phase_2:
            self.onBidMade_phase2(who_made_bid, how_much)
        else:
            self.onBidMade_phase1(who_made_bid, how_much)

    def onBidMade_phase1(self, who_made_bid, how_much):
        if who_made_bid == self.index:
            self.hold_it = True
        else:
            self.hold_it = False

        actual_magic = how_much - self.last_bid

        if self.broadcast and not self.knows_true_value:
            if who_made_bid in self.teammate_knows:
                index = self.magics_knows.index(actual_magic)
                if index == 15:
                    self.recv_true_value = True
                    self.broadcast = False
                    self.true_value = math.ceil(self.broadcast_value)
                    self.engine.print('recv value {}'.format(self.true_value))
                elif index == 14:
                    self.recv_true_value = True
                    self.broadcast = False
                    self.true_value = math.floor(self.broadcast_value)
                    self.engine.print('recv value {}'.format(self.true_value))
                else:
                    if self.broadcast_value == self.mean:
                        z = index / 7 - 1
                    else:
                        z = index / 14
                    self.broadcast_value = z * self.broadcast_stddev + self.broadcast_value
                    self.broadcast_stddev = self.broadcast_stddev / 5
                    self.engine.print('recv value z({}) i({}) v({}) stddev({}) by ({})'.format(
                        z, index, self.broadcast_value, self.broadcast_stddev, self.index))

        expect_magic = self.magics[math.floor(
            self.last_bid) % len(self.magics)]
        expect_magic_knows = self.magics_knows[math.floor(
            self.last_bid) % len(self.magics_knows)]

        if not self.has_identified_teammates:
            if actual_magic == expect_magic:
                if who_made_bid not in self.teammate_dknows_yes:
                    self.teammate_dknows_yes[who_made_bid] = 1
                else:
                    self.teammate_dknows_yes[who_made_bid] += 1
            else:
                self.teammate_dknows_no.add(who_made_bid)

            if actual_magic == expect_magic_knows:
                if who_made_bid not in self.teammate_knows_yes:
                    self.teammate_knows_yes[who_made_bid] = 1
                else:
                    self.teammate_knows_yes[who_made_bid] += 1
            else:
                self.teammate_knows_no.add(who_made_bid)

            self.teammate_knows = self.teammate_knows_yes.keys() - self.teammate_knows_no
            self.teammate_dknows = self.teammate_dknows_yes.keys() - self.teammate_dknows_no
            self.teammate_all = self.teammate_knows.union(self.teammate_dknows)

            if 2 <= len(self.teammate_all) <= 3 and len(self.teammate_knows) <= 1:
                flag = True
                for know in self.teammate_knows:
                    if self.teammate_knows_yes[know] < 3:
                        flag = False
                for dknow in self.teammate_dknows:
                    if self.teammate_dknows_yes[dknow] < 3:
                        flag = False
                if flag:
                    self.has_identified_teammates = True
                    self.has_identified_roles = True

            if self.has_identified_teammates and not self.broadcast:
                if len(self.teammate_knows) == 1:
                    if self.index in self.teammate_knows:
                        self.engine.print(f"{self.index} broadcast!")
                    self.broadcast = True
                    self.broadcast_value = self.mean
                    self.broadcast_stddev = self.stddev
                    if self.index == min(self.teammate_dknows):
                        self.sacrifice = True
                else:
                    # no one knows true value
                    self.no_one_knows = True
                    if self.index == min(self.teammate_dknows):
                        self.sacrifice = True

        if self.has_identified_teammates:
            if self.has_identified_roles:
                if who_made_bid in self.teammate_all:
                    self.team_hold_it = True
                else:
                    self.team_hold_it = False
            else:
                if who_made_bid in self.teammate_all:
                    if actual_magic == self.magics_knows[1]:
                        self.teammate_dknows.add(who_made_bid)
                    elif actual_magic == self.magics_knows[0]:
                        self.teammate_knows.add(who_made_bid)
                    else:
                        self.engine.print("reid error!")
                if len(self.teammate_knows.union(self.teammate_dknows)) == len(self.teammate_all):
                    self.has_identified_roles = True
                    if len(self.teammate_knows) == 1:
                        if self.index in self.teammate_knows:
                            self.engine.print(f"{self.index} broadcast!")
                        self.broadcast = True
                        self.broadcast_value = self.mean
                        self.broadcast_stddev = self.stddev
                        if self.index == min(self.teammate_dknows):
                            self.sacrifice = True
                    else:
                        # no one knows true value
                        self.no_one_knows = True
                        if self.index == min(self.teammate_dknows):
                            self.sacrifice = True

        if not (8 <= actual_magic <= 23):
            self.abs_enemy.add(who_made_bid)

        if who_made_bid < self.index:
            self.bid_info[who_made_bid][self.round] = how_much
            self.bid_seq.append((who_made_bid, self.round, how_much))
        else:
            self.bid_info[who_made_bid][self.round - 1] = how_much
            self.bid_seq.append((who_made_bid, self.round - 1, how_much))

        if how_much <= self.mean/4:
            # stage 1
            self.stage_counter[0][who_made_bid] += 1
        elif how_much <= self.mean*3/4:
            # stage 2
            self.stage_counter[1][who_made_bid] += 1
        else:
            # stage 3
            self.stage_counter[2][who_made_bid] += 1

        self.last_bid = how_much
        self.last_bid_who = who_made_bid
        return

    def onBidMade_phase2(self, who_made_bid, how_much):
        if who_made_bid == self.index:
            self.hold_it = True
        else:
            self.hold_it = False

        actual_magic = how_much - self.last_bid

        if self.broadcast and not self.knows_true_value:
            if who_made_bid in self.teammate_knows:
                index = self.magics_knows.index(actual_magic)
                if index == 15:
                    self.recv_true_value = True
                    self.broadcast = False
                    self.true_value = math.ceil(self.broadcast_value)
                    self.engine.print('recv value {}'.format(self.true_value))
                elif index == 14:
                    self.recv_true_value = True
                    self.broadcast = False
                    self.true_value = math.floor(self.broadcast_value)
                    self.engine.print('recv value {}'.format(self.true_value))
                else:
                    if self.broadcast_value == self.mean:
                        z = index / 7 - 1
                    else:
                        z = index / 14
                    self.broadcast_value = z * self.broadcast_stddev + self.broadcast_value
                    self.broadcast_stddev = self.broadcast_stddev / 5
                    self.engine.print('recv value z({}) i({}) v({}) stddev({}) by ({})'.format(
                        z, index, self.broadcast_value, self.broadcast_stddev, self.index))

        expect_magic = self.magics[math.floor(
            self.last_bid) % len(self.magics)]
        expect_magic_knows = self.magics_knows[math.floor(
            self.last_bid) % len(self.magics_knows)]

        if not self.has_identified_teammates:
            if actual_magic == expect_magic:
                if who_made_bid not in self.teammate_dknows_yes:
                    self.teammate_dknows_yes[who_made_bid] = 1
                else:
                    self.teammate_dknows_yes[who_made_bid] += 1
            else:
                self.teammate_dknows_no.add(who_made_bid)

            if actual_magic == expect_magic_knows:
                if who_made_bid not in self.teammate_knows_yes:
                    self.teammate_knows_yes[who_made_bid] = 1
                else:
                    self.teammate_knows_yes[who_made_bid] += 1
            else:
                self.teammate_knows_no.add(who_made_bid)

            self.teammate_knows = self.teammate_knows_yes.keys() - self.teammate_knows_no
            self.teammate_dknows = self.teammate_dknows_yes.keys() - self.teammate_dknows_no
            self.teammate_all = self.teammate_knows.union(self.teammate_dknows)

            if 2 <= len(self.teammate_all) <= 3 and len(self.teammate_knows) <= 1:
                flag = True
                for know in self.teammate_knows:
                    if self.teammate_knows_yes[know] < 3:
                        flag = False
                for dknow in self.teammate_dknows:
                    if self.teammate_dknows_yes[dknow] < 3:
                        flag = False
                if flag:
                    self.has_identified_teammates = True
                    self.has_identified_roles = True

            if self.has_identified_teammates and not self.broadcast:
                if len(self.teammate_knows) == 1:
                    if self.index in self.teammate_knows:
                        self.engine.print(f"{self.index} broadcast!")
                    self.broadcast = True
                    self.broadcast_value = self.mean
                    self.broadcast_stddev = self.stddev
                    if self.index == min(self.teammate_dknows):
                        self.sacrifice = True
                else:
                    # no one knows true value
                    self.no_one_knows = True
                    if self.index == min(self.teammate_dknows):
                        self.sacrifice = True

        if self.has_identified_teammates:
            if self.has_identified_roles:
                if who_made_bid in self.teammate_all:
                    self.team_hold_it = True
                else:
                    self.team_hold_it = False
            else:
                if who_made_bid in self.teammate_all:
                    if actual_magic == self.magics_knows[1]:
                        self.teammate_dknows.add(who_made_bid)
                    elif actual_magic == self.magics_knows[0]:
                        self.teammate_knows.add(who_made_bid)
                    else:
                        self.engine.print("reid error!")
                if len(self.teammate_knows.union(self.teammate_dknows)) == len(self.teammate_all):
                    self.has_identified_roles = True
                    if len(self.teammate_knows) == 1:
                        if self.index in self.teammate_knows:
                            self.engine.print(f"{self.index} broadcast!")
                        self.broadcast = True
                        self.broadcast_value = self.mean
                        self.broadcast_stddev = self.stddev
                        if self.index == min(self.teammate_dknows):
                            self.sacrifice = True
                    else:
                        # no one knows true value
                        self.no_one_knows = True
                        if self.index == min(self.teammate_dknows):
                            self.sacrifice = True

        if not (8 <= actual_magic <= 23):
            self.abs_enemy.add(who_made_bid)

        if who_made_bid < self.index:
            self.bid_info[who_made_bid][self.round] = how_much
            self.bid_seq.append((who_made_bid, self.round, how_much))
        else:
            self.bid_info[who_made_bid][self.round - 1] = how_much
            self.bid_seq.append((who_made_bid, self.round - 1, how_much))

        if how_much <= self.mean/4:
            # stage 1
            self.stage_counter[0][who_made_bid] += 1
        elif how_much <= self.mean*3/4:
            # stage 2
            self.stage_counter[1][who_made_bid] += 1
        else:
            # stage 3
            self.stage_counter[2][who_made_bid] += 1

        self.last_bid = how_much
        self.last_bid_who = who_made_bid
        return

    def onMyTurn(self, last_bid):

        if self.phase_2:
            self.onMyTurn_phase2(last_bid)
        else:
            self.onMyTurn_phase1(last_bid)

    def onMyTurn_phase1(self, last_bid):
        # print(self.index, self.round)
        self.round += 1

        magic = self.magics[math.floor(last_bid) % len(self.magics)]
        magic_knows = self.magics_knows[math.floor(
            last_bid) % len(self.magics_knows)]
        magic_random = random.randint(8, 23)

        if last_bid <= self.mean/4:
            pr = 32/50
            self.stage_counter[0][-1] += 1
        elif last_bid <= self.mean*3/4:
            pr = 16/100
            self.stage_counter[1][-1] += 1
        else:
            pr = 2/50
            self.stage_counter[2][-1] += 1

        if self.has_identified_teammates and not self.has_identified_roles:
            if random.random() < pr or False:
                if self.knows_true_value:
                    self.engine.makeBid(last_bid + self.magics_knows[0])
                    self.engine.print(f'{self.index:02} makeBid 01')
                else:
                    self.engine.makeBid(last_bid + self.magics_knows[1])
                    self.engine.print(f'{self.index:02} makeBid 02')
            return

        if self.no_one_knows:
            # and last_bid + magic_random <= self.mean:
            if random.random() < pr:  # or (self.sacrifice and not self.team_hold_it):
                self.engine.makeBid(last_bid + magic_random)
                self.engine.print(f'{self.index:02} makeBid 03')
            return

        if self.broadcast and self.knows_true_value:
            if last_bid > self.true_value:
                self.engine.makeBid(last_bid + self.magics_knows[14])
                self.engine.print(f'{self.index:02} makeBid 04')
                self.engine.print('too expensive, quit now at ({})'.format(
                    math.floor(self.broadcast_value)))
                self.broadcast = False
                return
            if abs(self.broadcast_value - self.true_value) < 1:
                if self.true_value > self.broadcast_value:
                    self.engine.makeBid(last_bid + self.magics_knows[15])
                    self.engine.print(f'{self.index:02} makeBid 05')
                else:
                    self.engine.makeBid(last_bid + self.magics_knows[14])
                    self.engine.print(f'{self.index:02} makeBid 06')
                self.engine.print('send value {}'.format(self.true_value))
                self.broadcast = False
                return
            z = (self.true_value - self.broadcast_value) / \
                self.broadcast_stddev
            if self.broadcast_value == self.mean:
                index = math.floor((z + 1) * 7)
                self.broadcast_value = (index / 7 - 1) * \
                    self.broadcast_stddev + self.broadcast_value
            else:
                index = math.floor(z * 14)
                self.broadcast_value = (index / 14) * \
                    self.broadcast_stddev + self.broadcast_value
            self.broadcast_stddev /= 5
            if 0 <= index < 14:
                self.engine.makeBid(last_bid + self.magics_knows[index])
                self.engine.print(f'{self.index:02} makeBid 07')
                self.engine.print('send value z({}) i({}) v({}) stddev({}) from ({})'.format(
                    z, index, self.broadcast_value, self.broadcast_stddev, self.index))
            elif index < 0:
                self.engine.makeBid(last_bid + self.magics_knows[14])
                self.engine.print(f'{self.index:02} makeBid 08')
                self.engine.print('send value {}'.format(self.true_value))
                self.broadcast = False
            else:
                self.engine.makeBid(last_bid + self.magics_knows[15])
                self.engine.print(f'{self.index:02} makeBid 09')
                self.engine.print('send value {}'.format(self.true_value))
                self.broadcast = False
            return

        # don't know true value
        if not self.knows_true_value:
            # hasn't identified roles
            if not self.has_identified_teammates:
                # random and small enough
                if (random.random() < pr or False) and last_bid + magic <= self.mean:
                    self.engine.print(f'{self.index:02} makeBid 10')
                    self.engine.makeBid(last_bid + magic)
            # already identify all roles (and someone knows true value)
            # haven't finished braodcast yet
            elif not self.recv_true_value:
                # random hit
                if random.random() < pr:
                    # not too expensive
                    if last_bid + magic_random <= self.mean:
                        self.engine.print(f'{self.index:02} makeBid 11')
                        self.engine.makeBid(last_bid + magic_random)
            # already receive broadcasted true value
            else:  # if self.recv_true_value:
                # not sacrifice
                if not self.sacrifice:
                    # random hit
                    if random.random() < pr:
                        # not too expensive
                        if last_bid + magic_random <= self.true_value:
                            self.engine.makeBid(last_bid + magic_random)
                            self.engine.print(f'{self.index:02} makeBid 12')
                # sacrifice (always tend to bid)
                # end game strategy
                elif self.true_value - 30 <= last_bid <= self.true_value - 8:
                    if last_bid <= self.true_value - 15:
                        self.engine.makeBid(self.true_value - 7)
                        self.engine.print(f'{self.index:02} makeBid 13')
                    else:
                        self.engine.makeBid(last_bid + 8)
                        self.engine.print(f'{self.index:02} makeBid 14')
                # not end game
                # and not too expensive
                # (always tend to bid)
                elif (random.random() < pr or not self.team_hold_it) and last_bid + magic_random <= self.true_value:
                    self.engine.makeBid(last_bid + magic_random)
                    self.engine.print(f'{self.index:02} makeBid 15')
            # # no teammate holds it
            # elif not self.team_hold_it:
            #     pass
            return

        # randomise magic
        if self.has_identified_teammates:
            magic_knows = magic_random

        # know true value
        if self.knows_true_value:
            # no teammate holds it or
            # and price not very high
            if last_bid + magic_knows <= self.true_value - 50:
                # random hit
                if random.random() < pr:
                    self.engine.makeBid(last_bid + magic_knows)
                    self.engine.print(f'{self.index:02} makeBid 16')
                # fail to hit
                # not yet identified teammates
                elif not self.has_identified_teammates:
                    self.engine.makeBid(last_bid + magic_knows)
                    self.engine.print(f'{self.index:02} makeBid 17')
                # # has identified teammates
                # # and almost lose it
                # elif self.last_bid_who == (self.index + 1) % self.num_players:
                #     self.engine.makeBid(last_bid + magic_knows)
                #     self.engine.print(f'{self.index:02} makeBid 18')

    def onMyTurn_phase2(self, last_bid):
        # print(self.index, self.round)
        self.round += 1

        magic = self.magics[math.floor(last_bid) % len(self.magics)]
        magic_knows = self.magics_knows[math.floor(
            last_bid) % len(self.magics_knows)]
        magic_random = random.randint(8, 23)

        if last_bid <= self.mean/4:
            pr = 32/50
            self.stage_counter[0][-1] += 1
        elif last_bid <= self.mean*3/4:
            pr = 16/100
            self.stage_counter[1][-1] += 1
        else:
            pr = 2/50
            self.stage_counter[2][-1] += 1

        if self.has_identified_teammates and not self.has_identified_roles:
            if random.random() < pr or False:
                if self.knows_true_value:
                    self.engine.makeBid(last_bid + self.magics_knows[0])
                    self.engine.print(f'{self.index:02} makeBid 01')
                else:
                    self.engine.makeBid(last_bid + self.magics_knows[1])
                    self.engine.print(f'{self.index:02} makeBid 02')
            return

        if self.no_one_knows:
            # and last_bid + magic_random <= self.mean:
            if random.random() < pr:  # or (self.sacrifice and not self.team_hold_it):
                self.engine.makeBid(last_bid + magic_random)
                self.engine.print(f'{self.index:02} makeBid 03')
            return

        if self.broadcast and self.knows_true_value:
            if last_bid > self.true_value:
                self.engine.makeBid(last_bid + self.magics_knows[14])
                self.engine.print(f'{self.index:02} makeBid 04')
                self.engine.print('too expensive, quit now at ({})'.format(
                    math.floor(self.broadcast_value)))
                self.broadcast = False
                return
            if abs(self.broadcast_value - self.true_value) < 1:
                if self.true_value > self.broadcast_value:
                    self.engine.makeBid(last_bid + self.magics_knows[15])
                    self.engine.print(f'{self.index:02} makeBid 05')
                else:
                    self.engine.makeBid(last_bid + self.magics_knows[14])
                    self.engine.print(f'{self.index:02} makeBid 06')
                self.engine.print('send value {}'.format(self.true_value))
                self.broadcast = False
                return
            z = (self.true_value - self.broadcast_value) / \
                self.broadcast_stddev
            if self.broadcast_value == self.mean:
                index = math.floor((z + 1) * 7)
                self.broadcast_value = (index / 7 - 1) * \
                    self.broadcast_stddev + self.broadcast_value
            else:
                index = math.floor(z * 14)
                self.broadcast_value = (index / 14) * \
                    self.broadcast_stddev + self.broadcast_value
            self.broadcast_stddev /= 5
            if 0 <= index < 14:
                self.engine.makeBid(last_bid + self.magics_knows[index])
                self.engine.print(f'{self.index:02} makeBid 07')
                self.engine.print('send value z({}) i({}) v({}) stddev({}) from ({})'.format(
                    z, index, self.broadcast_value, self.broadcast_stddev, self.index))
            elif index < 0:
                self.engine.makeBid(last_bid + self.magics_knows[14])
                self.engine.print(f'{self.index:02} makeBid 08')
                self.engine.print('send value {}'.format(self.true_value))
                self.broadcast = False
            else:
                self.engine.makeBid(last_bid + self.magics_knows[15])
                self.engine.print(f'{self.index:02} makeBid 09')
                self.engine.print('send value {}'.format(self.true_value))
                self.broadcast = False
            return

        # don't know true value
        if not self.knows_true_value:
            # hasn't identified roles
            if not self.has_identified_teammates:
                # random and small enough
                if (random.random() < pr or False) and last_bid + magic <= self.mean:
                    self.engine.print(f'{self.index:02} makeBid 10')
                    self.engine.makeBid(last_bid + magic)
            # already identify all roles (and someone knows true value)
            # haven't finished braodcast yet
            elif not self.recv_true_value:
                # random hit
                if random.random() < pr:
                    # not too expensive
                    if last_bid + magic_random <= self.mean:
                        self.engine.print(f'{self.index:02} makeBid 11')
                        self.engine.makeBid(last_bid + magic_random)
            # already receive broadcasted true value
            else:  # if self.recv_true_value:
                # not sacrifice
                if not self.sacrifice:
                    # random hit
                    if random.random() < pr:
                        # not too expensive
                        if last_bid + magic_random <= self.true_value:
                            self.engine.makeBid(last_bid + magic_random)
                            self.engine.print(f'{self.index:02} makeBid 12')
                # sacrifice (always tend to bid)
                # end game strategy
                elif self.true_value - 30 <= last_bid <= self.true_value - 8:
                    if last_bid <= self.true_value - 15:
                        self.engine.makeBid(self.true_value - 7)
                        self.engine.print(f'{self.index:02} makeBid 13')
                    else:
                        self.engine.makeBid(last_bid + 8)
                        self.engine.print(f'{self.index:02} makeBid 14')
                # not end game
                # and not too expensive
                # (always tend to bid)
                elif (random.random() < pr or not self.team_hold_it) and last_bid + magic_random <= self.true_value:
                    self.engine.makeBid(last_bid + magic_random)
                    self.engine.print(f'{self.index:02} makeBid 15')
            # # no teammate holds it
            # elif not self.team_hold_it:
            #     pass
            return

        # randomise magic
        if self.has_identified_teammates:
            magic_knows = magic_random

        # know true value
        if self.knows_true_value:
            # no teammate holds it or
            # and price not very high
            if last_bid + magic_knows <= self.true_value - 50:
                # random hit
                if random.random() < pr:
                    self.engine.makeBid(last_bid + magic_knows)
                    self.engine.print(f'{self.index:02} makeBid 16')
                # fail to hit
                # not yet identified teammates
                elif not self.has_identified_teammates:
                    self.engine.makeBid(last_bid + magic_knows)
                    self.engine.print(f'{self.index:02} makeBid 17')
                # # has identified teammates
                # # and almost lose it
                # elif self.last_bid_who == (self.index + 1) % self.num_players:
                #     self.engine.makeBid(last_bid + magic_knows)
                #     self.engine.print(f'{self.index:02} makeBid 18')

    def onAuctionEnd(self):
        # Now is the time to report team members, or do any cleanup.
        # print(self.index, self.round)

        if self.phase_2:
            self.onAuctionEnd_phase2()
        else:
            self.onAuctionEnd_phase1()

    def onAuctionEnd_phase1(self):
        for stage in range(1, 3):
            round_in_stage = self.stage_counter[stage][-1]
            self.engine.print(f"stage {stage}: {round_in_stage} rounds")
            if not 30 <= round_in_stage <= 1500:
                self.engine.print(f"outlier stage")
                continue
            round_in_stage_index = round_in_stage - 30
            # round_in_stage_index = math.floor(
            #     math.ceil(round_in_stage / 10) * 10)
            a, b = self.stage_stat[stage][round_in_stage_index]
            for player in range(self.num_players):
                x = self.stage_counter[stage][player]
                if a <= x <= b:
                    self.npc_yes.add(player)
                else:
                    self.engine.print(
                        f"stage {stage} test fail {player} on {x}")
                    self.npc_no.add(player)

        teammate = list(self.teammate_knows) + list(self.teammate_dknows)
        teammate_knows = list(self.teammate_knows)
        if len(teammate) < len(self.teammate_all):
            teammate = list(self.teammate_all)

        self.npc = self.npc_yes - self.npc_no
        if len(self.npc) < 1:
            pass
        else:
            self.enemy = self.abs_enemy.union(
                set(range(self.num_players)) - self.npc)

        self.engine.print("knows    : {}".format(teammate_knows))
        self.engine.print("teammates: {}".format(teammate))
        self.engine.print("npc_no   : {}".format(self.npc_no))
        self.engine.print("npc_yes  : {}".format(self.npc_yes))
        self.engine.print("npc      : {}".format(self.npc))
        self.engine.print("enemy    : {}".format(self.enemy))

        if len(teammate_knows) > 1:
            teammate_knows = []
        if len(teammate) > 3:
            teammate = []
        if len(self.enemy - self.teammate_all) > 6:
            enemy = list(self.abs_enemy)
        else:
            enemy = list(self.enemy)

        if self.sacrifice:
            if len(self.teammate_all) == 3:
                self.engine.reportTeams(
                    teammate,
                    enemy,
                    teammate_knows +
                    list(set(range(self.num_players)) - self.teammate_all)
                )
            else:
                self.engine.reportTeams(
                    teammate,
                    enemy,
                    teammate_knows
                )
        else:
            if len(self.teammate_all) == 3:
                if self.knows_true_value:
                    self.engine.reportTeams(
                        teammate,
                        enemy,
                        teammate_knows
                    )
                else:
                    self.engine.reportTeams(
                        teammate,
                        enemy,
                        teammate_knows
                    )
            else:
                if self.knows_true_value:
                    self.engine.reportTeams(
                        teammate,
                        enemy,
                        teammate_knows
                    )
                else:
                    self.engine.reportTeams(
                        teammate,
                        enemy,
                        teammate_knows
                    )

        self.auction += 1
        return

    def onAuctionEnd_phase2(self):
        for stage in range(1, 3):
            round_in_stage = self.stage_counter[stage][-1]
            self.engine.print(f"stage {stage}: {round_in_stage} rounds")
            if not 30 <= round_in_stage <= 1500:
                self.engine.print(f"outlier stage")
                continue
            round_in_stage_index = round_in_stage - 30
            # round_in_stage_index = math.floor(
            #     math.ceil(round_in_stage / 10) * 10)
            a, b = self.stage_stat[stage][round_in_stage_index]
            for player in range(self.num_players):
                x = self.stage_counter[stage][player]
                if a <= x <= b:
                    self.npc_yes.add(player)
                else:
                    self.engine.print(
                        f"stage {stage} test fail {player} on {x}")
                    self.npc_no.add(player)

        teammate = list(self.teammate_knows) + list(self.teammate_dknows)
        teammate_knows = list(self.teammate_knows)
        if len(teammate) < len(self.teammate_all):
            teammate = list(self.teammate_all)

        self.npc = self.npc_yes - self.npc_no
        if len(self.npc) < 1:
            pass
        else:
            self.enemy = self.abs_enemy.union(
                set(range(self.num_players)) - self.npc)

        self.engine.print("knows    : {}".format(teammate_knows))
        self.engine.print("teammates: {}".format(teammate))
        self.engine.print("npc_no   : {}".format(self.npc_no))
        self.engine.print("npc_yes  : {}".format(self.npc_yes))
        self.engine.print("npc      : {}".format(self.npc))
        self.engine.print("enemy    : {}".format(self.enemy))

        if len(teammate_knows) > 1:
            teammate_knows = []
        if len(teammate) > 3:
            teammate = []
        if len(self.enemy - self.teammate_all) > 6:
            enemy = list(self.abs_enemy)
        else:
            enemy = list(self.enemy)

        if self.sacrifice:
            if len(self.teammate_all) == 3:
                self.engine.reportTeams(
                    teammate,
                    enemy,
                    teammate_knows +
                    list(set(range(self.num_players)) - self.teammate_all)
                )
            else:
                self.engine.reportTeams(
                    teammate,
                    enemy,
                    teammate_knows
                )
        else:
            if len(self.teammate_all) == 3:
                if self.knows_true_value:
                    self.engine.reportTeams(
                        teammate,
                        enemy,
                        teammate_knows
                    )
                else:
                    self.engine.reportTeams(
                        teammate,
                        enemy,
                        teammate_knows
                    )
            else:
                if self.knows_true_value:
                    self.engine.reportTeams(
                        teammate,
                        enemy,
                        teammate_knows
                    )
                else:
                    self.engine.reportTeams(
                        teammate,
                        enemy,
                        teammate_knows
                    )

        self.auction += 1
        return

# x = CompetitorInstance()
